id: query2
type: datasource
subtype: SqlTransformQuery
resourceName: SQL Transforms
template:
  ordered:
    - queryRefreshTime: ''
    - queryDisabledMessage: ''
    - successMessage: ''
    - queryDisabled: ''
    - playgroundQuerySaveId: latest
    - resourceNameOverride: ''
    - runWhenModelUpdates: true
    - showFailureToaster: true
    - query: >-
        SELECT 
          country.country_name_eng,
          SUM(CASE WHEN call.id IS NOT NULL THEN 1 ELSE 0 END) AS calls,
          AVG(ISNULL(DATEDIFF(SECOND, call.start_time, call.end_time),0)) AS avg_difference
        FROM country 

        LEFT JOIN city ON city.country_id = country.id

        LEFT JOIN customer ON city.id = customer.city_id

        LEFT JOIN call ON call.customer_id = customer.id


        GROUP BY 
          country.id,
          
          country.country_name_eng
        HAVING AVG(ISNULL(DATEDIFF(SECOND, call.start_time, call.end_time),0)) >
        (SELECT AVG(DATEDIFF(SECOND, call.start_time, call.end_time)) FROM call)

        ORDER BY calls DESC, country.id ASC;
    - playgroundQueryUuid: ''
    - playgroundQueryId: null
    - privateParams: []
    - runWhenPageLoadsDelay: ''
    - data: null
    - importedQueryInputs:
        ordered: []
    - isImported: false
    - showSuccessToaster: true
    - cacheKeyTtl: ''
    - metadata: null
    - errorTransformer: >-
        // The variable 'data' allows you to reference the request's data in the
        transformer. 

        // example: return data.find(element => element.isError)

        return data.error
    - confirmationMessage: null
    - isFetching: false
    - rawData: null
    - queryTriggerDelay: '0'
    - watchedParams: []
    - enableErrorTransformer: false
    - showLatestVersionUpdatedWarning: false
    - timestamp: 0
    - importedQueryDefaults:
        ordered: []
    - enableTransformer: true
    - showUpdateSetValueDynamicallyToggle: true
    - runWhenPageLoads: false
    - transformer: >-
        // type your code here

        // example: return formatDataAsArray(data).filter(row => row.quantity >
        20)

        return data
    - events: []
    - queryTimeout: '10000'
    - requireConfirmation: false
    - queryFailureConditions: ''
    - enableCaching: false
    - allowedGroups: []
    - queryThrottleTime: '750'
    - updateSetValueDynamically: false
    - notificationDuration: ''
createdAt: 2021-08-30T18:34:14.096Z
